/**
 * dat.GUI JavaScript Controller Library
 * http://code.google.com/p/dat-gui
 *
 * Copyright 2011-2020 Data Arts Team, Google Creative Lab
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 */

// ▐▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▌
// ▐ Triggering UTF8 file save hack ▌
// ▐▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▌
//
// --------------------------------------------------------------

$nest-margin: 4px;
$row-height: 32px;

$button-height: 28px;
$shadow: 0 2px 10px rgba(0, 0, 0, 0.25);

.dg {
  /** Clear list styles */
  ul {
    list-style: none;
    margin: 0;
    padding: 0;
    width: 100%;
    clear: both;
  }

  /* Auto-place container */
  &.ac {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    height: 0;
    // we make sure the dat.gui sits in its own layer for repaint purposes:
    // see http://benfrain.com/improving-css-performance-fixed-position-elements/
    // Note that the backface style here comes from that article but is not
    // really necessary any more now that we have our layer.
    // Compare: https://developers.google.com/web/updates/2012/09/Stacking-Changes-Coming-to-position-fixed-elements?hl=en
    z-index: 0;
  }

  &:not(.ac) .main {
    /** Exclude mains in ac so that we don't hide close button */
    overflow: hidden;
  }

  &.main {
    @include transition(opacity, 0.1s, linear);

    overflow: visible;

    box-sizing: border-box;
    box-shadow: $shadow;

    &.taller-than-window {
      //overflow-y: auto;

      .close-button {
        opacity: 1;

        /* TODO, these are style notes */
        margin-top: -1px;
        border-top: 1px solid $border-color;
      }

      > ul {
        overflow: auto;
        overflow-y: auto;
        overflow-x: hidden;
      }
    }

    ul.closed .close-button {
      opacity: 1 !important;
    }

    &:hover .close-button,
    .close-button.drag {
      opacity: 1;
    }

    .close-button {
      // opacity: 0;
      @include transition(opacity, 0.1s, linear);

      border: 0;
      box-shadow: $shadow;
      line-height: $button-height - 1;
      height: $button-height;

      /* TODO, these are style notes */
      cursor: pointer;
      text-align: center;
      background-color: #000000;

      &.close-top {
        position: relative;
      }

      &.close-bottom {
        position: absolute;
      }

      &:hover {
        background-color: #111111;
      }

      img {
        display: inline-block;
        margin: 2px;
        vertical-align: middle;
      }
    }
  }

  /* Auto-placed GUI's */
  &.a {
    float: right;
    margin-right: 15px;
    overflow-y: visible;
    // overflow-x: hidden;

    &.has-save > ul {
      &.close-top {
        margin-top: 0;
      }

      &.close-bottom {
        margin-top: $row-height;
      }

      &.closed {
        margin-top: 0;
      }
    }

    .save-row {
      top: 0;
      z-index: 1002;

      &.close-top {
        position: relative;
      }

      &.close-bottom {
        position: fixed;
      }
    }
  }

  li {
    @include transition(height, 0.1s, ease-out);
    @include transition(overflow, 0.1s, linear);
  }
  }

  li.cr > div {
    position: relative;
  }

  /* Line items that don't contain folders. */
  li:not(.folder) {
    cursor: auto;
    height: auto;
    //min-height: $row-height;
    line-height: $row-height;
    overflow: visible;
    padding: 0 4px 0 5px;
  }

  li.folder {
    padding: 0;
    border-left: $nest-margin solid transparent;
  }

  /** Folder names */
  li.title {
    cursor: pointer;
    margin-left: -$nest-margin;
  }

  /** Hides closed items */
  .closed li:not(.title),
  .closed ul li,
  .closed ul li > * {
    height: 0;
    overflow: hidden;
    border: 0;
  }

  /** Controller row */
  .cr {
    clear: both;
    padding-left: 3px;
    //min-height: $row-height;
    height: auto;
    overflow: hidden;
  }

  /** Name-half (left) */
  .property-name {
    cursor: default;
    float: left;
    clear: left;
    width: 40%;
    overflow: hidden;
    text-overflow: ellipsis;
    text-overflow: "…" "…"; // https://developer.mozilla.org/en-US/docs/Web/CSS/text-overflow
    white-space: nowrap; // otherwise the text will simply wrap and the text-overflow ellipsis will not be applied, but instead the text simply disappears (if only partially)
  }

  /** Controller-half (right) */
  .c {
    float: left;
    width: 60%;
    height: 125px;
    position: relative;
  }

  /** Controller placement */
  .c input[type="text"],
  .c input[type="number"],
  .c canvas {
    border: 0;
    margin-top: 4px;
    padding: 3px;
    width: 100%;
    float: right;
  }

  .c textarea {
    border: 0;
    margin-top: 4px;
    padding: 3px;
    // width: 100%;
    float: right;
    max-width: 100%;
    width: 100% !important;
  }

  /** Controller placement */
  .c canvas {
    border: 0;
    margin-top: 0;
    outline: none;
    border: 0;
    width: 146px;
    float: right;
  }

  /** Shorter number boxes when slider is present. */
  .has-slider {
    input[type="text"],
    input[type="number"] {
      width: 30%;

      // display: none;
      margin-left: 0;
    }
  }

  /** Reduce margin and set height for plotter */
  .c canvas {
    padding: 0;
    height: 53px;
  }

  .slider {
    float: left;
    width: 66%; // should be 70% (input is 30% wide) but we leave a litte room at the right side that way
    margin-left: -5px;
    margin-right: 0;
    height: 19px;
    margin-top: 4px;
    position: relative;
    overflow: hidden;
  }

  .slider-fg {
    height: 100%;
  }

  .slider .label {
    pointer-events: none;
    text-align: center;
    position: absolute;
    width: 100%;
    height: 100%;
    vertical-align: middle;
    margin: 0;
    padding: 0;
    top: 0;
    line-height: 22px;
    white-space: nowrap;
  }

  .c input[type="checkbox"] {
    margin-top: 7px;             /* 9px */
  }

  .c select {
    margin-top: 5px;
  }

  /** Ensure the entire boolean and function row shows a hand */
  .cr.function,
  .cr.function .property-name,  // Don't know why I need to be this explicit 
  .cr.function *,
  .cr.boolean,
  .cr.boolean * {
    cursor: pointer;
  }

  /** allow overflow for color selector */
  .cr.color,
  .cr.vector {
    overflow: visible;
  }

  .selector {
    display: none;
    position: absolute;
    margin-left: -9px;
    margin-top: 23px;
    z-index: 10;
  }

  .c:hover .selector,
  .selector.drag {
    display: block;
  }

  li.save-row {
    padding: 0;

    .button {
      display: inline-block;
      padding: 0 6px;
    }
  }

  &.dialogue {
    background-color: #222222;
    width: 460px;
    padding: 15px;
    font-size: 13px;
    line-height: 15px;
  }
}

/* TODO Separate style and structure */
#dg-new-constructor {
  padding: 10px;
  color: #222222;
  font-family: Monaco, monospace;
  font-size: 10px;
  border: 0;
  resize: none;
  box-shadow: inset 1px 1px 1px #888888;
  word-wrap: break-word;
  margin: 12px 0;
  display: block;
  width: 440px;
  overflow-y: scroll;
  height: 100px;
  position: relative;
}

#dg-local-explain {
  display: none;
  font-size: 11px;
  line-height: 17px;
  border-radius: 3px;
  background-color: #333333;
  padding: 8px;
  margin-top: 10px;

  code {
    font-size: 10px;
  }
}

#dat-gui-save-locally {
  display: none;
}
